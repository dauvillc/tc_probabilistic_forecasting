experiment:
  name: normal_new_arch
  # Number of past time steps given as input
  past_steps: 4
  # List of the target time steps, as indices, e.g.
  # [0, 2] means +0h and +12h.
  target_steps: [0, 2]
  # Size of the input and output patches, in pixels (resolution=0.07Â°)
  patch_size: 128
  # Which contextual variables to include: (must be at least [])
  # LAT, LON, HOUR_COS, HOUR_SIN
  context_variables: ['LAT', 'LON', 'HOUR_COS', 'HOUR_SIN']
  # Optionally: indicate a minimum SSHS category to train on (from -1 to 5)
  # If None, no filtering is applied (equivalent to -1).
  train_min_category: -1.
  # Id of a W&B run from which to download the model to fine-tune it
  # If left to None, a new model we trained from scratch
  use-pre-trained-id:
tasks:
  # Parameters specific to each task
  # distribution:
  # - "deterministic" (MSE loss)
  # - "normal"
  # - "qc" (quantiles composite)
  # - "multivariate_normal"
  vmax:
    output_variables: ['INTENSITY']
    distribution: deterministic
  # mslp:
  # output_variables: ['MSLP']
  # distribution: deterministic
  # r34_avg:
  # output_variables: ['R35_4qAVG']
  # distribution: deterministic
  # location:
  # output_variables: ['LAT', 'LON']
  # distribution: deterministic
training_settings:
  epochs: 100
  batch_size: 128
  # Trainer precision, usually "bf16-mixed" or "32-true"
  precision: 32-true
  # Number of workers for the data loading
  num_workers: 27
  # Weight decay
  weight_decay: 0.05
  # Whether to enable data augmentation
  data_augmentation: true
  # Sampling weights
  sampling_weights: false
  # Whether to use a weighted loss for extreme events
  use_weighted_loss: false
  # Exponential tilting parameter of the loss (based on TERM)
  # 0 or None will be interpreted as no tilting
  loss_tilting: 0
  # Learning-related params
  initial_lr: 6.e-4
  final_lr: 1.0e-8
  beta1: 0.836
  beta2: 0.985
  # If fine-tuning, freeze the encoder
  freeze_encoder:
  # Optionally, specify a single task to train on
  trained_task:
model_hyperparameters:
  spatial_encoder:
    # What type of base block to use (either 'cbam' or 'conv')
    base_block: conv
    n_blocks: 3
    base_channels: 8
  temporal_encoder:
    n_blocks: 3
  prediction_head:
    reduction_factor: 128
